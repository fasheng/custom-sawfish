;; Personal Sawfish configuration file
;; 2012-10-10

;;* Basic

;; load path
(setq load-path (cons "~/.sawfish/" load-path))

;; load defaults
(require 'sawfish-defaults)

;;** load modules
(require 'sawfish.wm.ext.match-window)
(require 'sawfish.wm.focus)
(require 'sawfish.wm.windows)
(require 'sawfish.wm.util.compat)
(require 'sawfish.wm.workspace)
(require 'sawfish.wm.ext.wallpaper)
(require 'sawfish.wm.commands.jump-or-exec)
(require 'rep.io.timers)

;;** Menu
(bind-keys root-window-keymap "button3-click1"
           '(popup-root-menu))
(defvar-setq apps-menu-autogen nil)

;;*** prompt menu
(require 'prompt-menu)
(bind-keys global-keymap "W-C-Menu" '(prompt-menu root-menu "Menu: "))

;;*** load autogenerated arch-menu
(require 'init-arch-menu)

;; replace Sawfish's apps-menu with ours
(setq apps-menu arch-menu)

;;** error handler
(defvar-setq error-handler-beep nil)
(defvar-setq error-destination 'both)

;;** hot-spot
;; (defvar-setq hot-spots-enable t)
;; (defvar-setq hot-spot-delay 150)
;; (defvar-setq hot-spots-area 50)


;;** config defualt xterm, filemanager and browser
(defvar-setq xterm-program "terminal")
(defvar-setq browser-program "chromium")
(defvar-setq filemanager-program "nautilus")

;;** poweroff TODO

;;** key press TODO
(defvar-setq multi-click-delay 200)

;;** session TODO
(require 'sawfish.wm.session.init)
(require 'sawfish.wm.session.save)
(require 'sawfish.wm.session.load)

(defun fsh/save-session ()
  ;; (mapc stop-process (active-processes)
  )

;; (add-hook 'before-exit-hook 'save-session)
;; (add-hook 'after-initialization-hook 'load-session 'end)
;; (save-session)
;; (sm-save-yourself)

;;* Custom functions TODO

(defun fsh/toggle-window-visible (w)
  (if (window-visible-p w)
      (hide-window w)
    (show-window w)))

;;** fsh/display-message
(defun fsh/display-message (message #!optional seconds)
  (display-message message)
  (make-timer (lambda () (display-message nil)) (or seconds 3)))


;;* Look and feel, appearance
;;** theme
(custom-set-typed-variable (quote default-frame-style) (quote Bluecurve-Prion) (quote frame-style))

;;** font
(custom-set-typed-variable 'default-font '("Pango" . "WenQuanYi Zen Hei Medium 11") 'font)
(custom-set-typed-variable (quote use-custom-font) (quote t) (quote boolean))
(custom-set-typed-variable (quote frame-font-clicked) (quote ("Pango" . "WenQuanYi Zen Hei Medium 11")) (quote font))
(custom-set-typed-variable (quote frame-font-highlight) (quote ("Pango" . "WenQuanYi Zen Hei Medium 11")) (quote font))
(custom-set-typed-variable (quote frame-font-active) (quote ("Pango" . "WenQuanYi Zen Hei Medium 11")) (quote font))
(custom-set-typed-variable (quote frame-font-inactive) (quote ("Pango" . "WenQuanYi Zen Hei Medium 11")) (quote font))

;;** text position
(custom-set-typed-variable (quote use-custom-text-position) (quote t) (quote boolean))
(custom-set-typed-variable (quote custom-text-y-position) (quote center) (quote (choice default top center bottom)))
(custom-set-typed-variable (quote custom-text-x-position) (quote center) (quote (choice default left center right)))


;;** animation
(define-special-variable default-window-animator 'wireframe)

;;** wallpaper
(defvar-setq root-wallpaper "~/.wallpapers/Ariya/contents/images/1280x800.png")
(defvar-setq wallpaper-setter "hsetroot")
(defvar-setq wallpaper-setter-args "-center")
;; set wallpaper manual
(system "hsetroot -center ~/.wallpapers/Ariya/contents/images/1280x800.png &")

;;** transparency
(require 'native-focus-transparency)

;;* Keybinding
(custom-set-typed-variable 'wm-modifier-value '(super) 'modifier-list)

;;** global keymap
(bind-keys global-keymap
           ;;*** window
           "M-TAB"   'cycle-windows
           "M-ISO_Left_Tab" 'cycle-windows-backwards
           ;; "W-TAB"   'cycle-windows-backwards
           "W-j"     'previous-workspace-window
           "W-k"     'next-workspace-window
           "W-S-k"   'maximize-fill-window-toggle ;TODO
           "W-z"     'toggle-window-iconified
           "W-S-z"   'iconify-workspace-windows
           "W-m"     'maximize-fill-window-toggle
           "W-S-m"   'maximize-window-fullscreen-toggle

           ;;*** menu
           "W-Menu"  'popup-window-menu
           "C-Menu"  'popup-root-menu
           "S-Menu"  'popup-apps-menu

           ;;*** workspace, desktop
           "W-C-d"   'toggle-desktop    ;TODO
           "W-h"     'previous-workspace
           "W-l"     'next-workspace
           ;; TODO
           "W-S-h"   'send-to-previous-workspace
           "W-S-l"   'send-to-next-workspace
           "W-F1"    '(activate-workspace 1)
           "W-F2"    '(activate-workspace 2)
           "W-F3"    '(activate-workspace 3)
           "W-F4"    '(activate-workspace 4)
           "W-S-F1"  '(send-to-workspace 1)
           "W-S-F2"  '(send-to-workspace 2)
           "W-S-F3"  '(send-to-workspace 3)
           "W-S-F4"  '(send-to-workspace 4)
           "W-a"    '(activate-workspace 1)
           "W-s"    '(activate-workspace 2)
           "W-d"    '(activate-workspace 3)
           "W-f"    '(activate-workspace 4)
           "W-S-a"  '(send-to-workspace 1)
           "W-S-s"  '(send-to-workspace 2)
           "W-S-d"  '(send-to-workspace 3)
           "W-S-f"  '(send-to-workspace 4)

           ;;*** action
           ;; "F1"      '(system "true &") ;TODO
           "W-C-c"  '(system "sawfish-config &")
           "W-C-e"  'display-errors
           "W-e"    '(display-message nil) ;erase displayed message

           ;;**** screensaver
           "W-;"     '(system "(sleep 0.5; xset dpms force off) &")
           "Pause"   '(system "xscreensaver-command -lock & (sleep 2; xset dpms force off) &")

           ;;**** print screen
           "Print"   '(jump-or-exec "KSnapshot" "ksnapshot -c")
           "M-Print" '(system "ksnapshot --fullscreen &")
           "C-Print" '(system "ksnapshot --region &")
           ;; "Print"   '(system "import -border window.png &")
           ;; "C-Print" '(system "import -window root root.png &")

           ;;**** restart and quit TODO
           "C-M-Delete"   'restart
           "W-C-M-Delete" 'quit

           ;;**** other
           ;; "W-F2"    `(jump-or-exec "Gnome-run-dialog" "gnome-run-dialog" t)
           ;; "W-F6"    `(jump-or-exec "Geeqie" "geeqie" nil)
           ;; "W-F7"    `(jump-or-exec "Iceweasel" "iceweasel" t)
           ;; "W-F8"    `(jump-or-exec "Exaile" "exaile" t)
           ;; "W-F9"    `(jump-or-exec "Synaptic" "gksu -u root synaptic" nil)
           ;; "W-F10"   `(jump-or-exec "Geany" "geany" t)
           ;; "W-F11"   `(jump-or-exec "Glade-3" "glade-3" t)
           ;; "Home"    `(jump-or-exec "Nautilus" "nautilus --no-desktop ~" t)
           ;; "C-W-t"   '(system "eject -T /dev/scd0 &")
           ;; "C-W-x"   '(system "xkill &")

           )

;;** Application Keymacros
(define apps-keymap (make-keymap))
(bind-keys global-keymap "W-x" apps-keymap)

(defvar-setq nomatch-text "" "a string that will never match normal text")
(bind-keys apps-keymap
  "e"   `(jump-or-exec "Emacs" "emacs" t #:match-class t)

  "s"   `(jump-or-exec "SMPlayer" "smplayer" nil #:match-class t)
  "S-s" `(jump-or-exec nomatch-text "smplayer" nil #:match-class t)
  "v"   `(jump-or-exec "VLC media player" "vlc" nil #:match-class t)
  "S-v" `(jump-or-exec nomatch-text "vlc" nil #:match-class t)

  "t"   `(jump-or-exec "Terminator" "terminator" #:match-class t
                       #:onfocused (show-window (get-window-by-class "Terminator")))
  "S-t" `(jump-or-exec nomatch-text "terminator" nil #:match-class t)
  "f"   `(jump-or-exec "Nautilus" "nautilus" nil #:match-class t)
  "S-f" `(jump-or-exec nomatch-text "nautilus" nil #:match-class t)
  "b"   '(jump-or-exec "Chromium" "chromium" nil #:match-class t)
  "S-b" '(jump-or-exec nomatch-text "chromium" nil #:match-class t)
  ;; TODO
  ;; "t" '(xterm)
  ;; "b" '(browser)
  ;; "t" `(jump-or-exec "Flush" "flush" nil)
  ;; "z" '( system "gksu -u root /etc/init.d/network-manager restart &" )
  ;; "u" '( system "gksu -u root /etc/init.d/privoxy restart &" )
  )

;;* Workspace
(defvar-setq workspace-names '("Master" "Slave" "Playground" "Misc")â€ƒ)
(defvar-setq workspace-boundary-mode 'wrap-around)
(defvar-setq workspace-send-boundary-mode 'wrap-around)

;;** display workspace name
(defcustom display-ws-name-on-switch nil
  "Whether to display workspace name upon switch"
  :type boolean
  :group workspace
  :after-set (lambda () (display-ws-name-setter)))

(defcustom display-ws-name-timeout 2
  "How long to display workspace name"
  :type number
  :group workspace)

;; TODO timeout 0.5, show message on top
(define (display-workspace-name)
  (fsh/display-message
   (format nil "Now on Workspace: %s"
           (or (nth current-workspace workspace-names)
               (format nil (_ "Workspace %d") (1+ current-workspace))))
   display-ws-name-timeout))

(define (display-ws-name-setter)
  (if (eq display-ws-name-on-switch 't)
      (add-hook 'enter-workspace-hook display-workspace-name)
    (remove-hook 'enter-workspace-hook display-workspace-name)))

;; setup
(setq display-ws-name-on-switch t)
(setq display-ws-name-timeout 1)
(display-ws-name-setter)

;;** switch to last workspace or window
(defvar workspace-last nil "mark the last workspace")
(defvar window-last nil "mark the last window")
(define window-or-workspace? 'window)
(add-hook 'leave-workspace-hook
          (lambda (current)
            (setq workspace-last current)
            (setq window-or-workspace? 'workspace)))

(add-hook 'focus-out-hook
          (lambda (current)
            (setq window-last current)
            (setq window-or-workspace? 'window)))

(bind-keys global-keymap "W-`"
           (lambda ()
             (if (eq window-or-workspace? 'workspace)
                 (select-workspace workspace-last)
               (display-window window-last))))

;;* Viewports TODO
;; (defvar-setq viewport-dimensions '(1 . 1))
;; (defvar-setq viewport-minimum-dimensions '(1 . 1))
;; (defvar-setq uniconify-to-current-viewport t)
;; (defvar-setq viewport-boundary-mode 'dynamic)
;; (defvar-setq scroll-viewport-steps 45)


;;* Window
(defvar-setq decorate-transients t)

;;** cycling
(define-special-variable cycle-all-workspaces nil)
(define-special-variable cycle-all-viewports t)
(define-special-variable cycle-raise-windows nil)

;;** placement TODO
(defvar-setq place-window-mode 'centered)
(defvar-setq place-transient-mode 'centered-on-parent)

;;** window keymap
(bind-keys window-keymap
           "M-F4"     'delete-window-safely
           "M-S-F4"   'destroy-window
           "W-p"      'toggle-window-shaded
           )

;;** window history
(defvar-setq window-history-auto-save-position t)
(defvar-setq window-history-auto-save-dimensions t)
(defvar-setq window-history-auto-save-state t)
(defvar-setq window-history-ignore-transients nil)

;;** move & resize
(defvar-setq move-show-position t)
(defvar-setq resize-show-dimensions t)

(require 'sawfish.wm.commands.move-resize)

;;*** center-mouse-on-window-move
(require 'center-mouse-on-window-move)

;;*** move window in screen edges
(require 'animate-move)
(bind-keys window-keymap
           "W-i"   'animate-center-window
           "W-s-i" 'center-window
           "W-u"   'rotate-move)

;;*** move window manually
(require 'animate-move)
(defun fsh/move-window (dir inc #!optional edge no-focus)
  "Move focused window 'left, 'right, 'up or 'down."
  (interactive)
  (let* ((win (input-focus))
         (pos (window-position win))
         (dim (window-frame-dimensions win))
         (endx (car pos))
         (endy (cdr pos)))
    (cond ((eq dir 'left) (setq endx
                                (if edge
                                    0
                                  (- endx inc))))
          ((eq dir 'right) (setq endx
                                (if edge
                                    (- (screen-width) (car dim))
                                  (+ endx inc))))
          ((eq dir 'up) (setq endy
                              (if edge
                                  0
                                (- endy inc))))
          ((eq dir 'down) (setq endy
                              (if edge
                                  (- (screen-height) (cdr dim))
                                (+ endy inc)))))
    ;; (move-window-to win endx endy)
    (animate-move-window-to win endx endy)
    (unless no-focus
      (display-window win))))

(bind-keys global-keymap "W-M-h"   '(fsh/move-window 'left 30))
(bind-keys global-keymap "W-M-l"   '(fsh/move-window 'right 30))
(bind-keys global-keymap "W-M-j"   '(fsh/move-window 'down 30))
(bind-keys global-keymap "W-M-k"   '(fsh/move-window 'up 30))

(bind-keys global-keymap "W-M-S-h" '(fsh/move-window 'left 5))
(bind-keys global-keymap "W-M-S-l" '(fsh/move-window 'right 5))
(bind-keys global-keymap "W-M-S-j" '(fsh/move-window 'down 5))
(bind-keys global-keymap "W-M-S-k" '(fsh/move-window 'up 5))

(bind-keys global-keymap "W-M-Left" '(fsh/move-window 'left 0 'edge))
(bind-keys global-keymap "W-M-Right" '(fsh/move-window 'right 0 'edge))
(bind-keys global-keymap "W-M-Down" '(fsh/move-window 'down 0 'edge))
(bind-keys global-keymap "W-M-Up" '(fsh/move-window 'up 0 'edge))

;;*** no-mouse
(defvar-setq rsk-panel-height 0)
(require 'no-mouse)

(bind-keys global-keymap "W-C-h"      '(rsk-shove-size-window 'left 30))
(bind-keys global-keymap "W-C-l"     '(rsk-shove-size-window 'right 30))
(bind-keys global-keymap "W-C-k"        '(rsk-shove-size-window 'up 30))
(bind-keys global-keymap "W-C-j"      '(rsk-shove-size-window 'down 30))
(bind-keys global-keymap "W-C-S-h"    '(rsk-shove-size-window 'left 5))
(bind-keys global-keymap "W-C-S-l"   '(rsk-shove-size-window 'right 5))
(bind-keys global-keymap "W-C-S-k"      '(rsk-shove-size-window 'up 5))
(bind-keys global-keymap "W-C-S-j"    '(rsk-shove-size-window 'down 5))

(bind-keys global-keymap "W-KP_End"      '(rsk-grid-place-window 1))
(bind-keys global-keymap "W-KP_Down"     '(rsk-grid-place-window 2))
(bind-keys global-keymap "W-KP_Next"     '(rsk-grid-place-window 3))
(bind-keys global-keymap "W-KP_Left"     '(rsk-grid-place-window 4))
(bind-keys global-keymap "W-KP_Begin"    '(rsk-grid-place-window 5))
(bind-keys global-keymap "W-KP_Right"    '(rsk-grid-place-window 6))
(bind-keys global-keymap "W-KP_Home"     '(rsk-grid-place-window 7))
(bind-keys global-keymap "W-KP_Up"       '(rsk-grid-place-window 8))
(bind-keys global-keymap "W-KP_Prior"    '(rsk-grid-place-window 9))

;;*** tabbed window TODO
;; (require 'sawfish.wm.tabs.tab)
;; (require 'sawfish.wm.tabs.tabgroup)
;; (bind-keys window-keymap "W-t"   'tab-add-to-group)
;; (bind-keys window-keymap "W-S-t" 'tab-release-window)


;;** iswitch window TODO
(require 'iswitch-window)
(bind-keys global-keymap "W-w" 'iswitch-window)

;;** cabinet, extension for iswitch, TODO fix the keybind
;; (require 'cabinet)
;; (bind-keys global-keymap "W-S-w" 'cabinet-switch)

;;** window matcher, action for special windows

(add-window-matcher '((WM_CLASS . "^Emacs/emacs$"))
                    '((workspace . 1)))
(add-window-matcher '((WM_CLASS . "^Chromium/chromium$"))
                    '((workspace . 1)))
(add-window-matcher '((WM_CLASS . "^Vlc/vlc$"))
                    '((workspace . 3)))
;; (remove-window-matcher '((WM_CLASS . "^Ark/ark$"))
;;                      '(frame-type
;;                        depth
;;                        workspace))
;; TODO
(add-window-matcher '((WM_CLASS . "^Ark/ark$"))
                    '((dimensions . (800 . 600))))

;;*** test window matcher
(define-match-window-setter 'fsh/test
  (lambda (w prop value)
    (declare (unused prop))
    (display-message (format nil "Volume: %s %s" (car value) (cdr value)))
    ))

;;*** transpose keymap TODO
;; (define-match-window-setter 'keymap-trans
;;   (lambda (w prop value)
;;     (declare (unused prop))
;;     (let ((keymap (or (window-get w 'keymap)
;;                       (window-put w 'keymap (copy-sequence window-keymap)))))
;;       (mapcar
;;        (lambda (pair)         ; pair of from and to keys
;;          (bind-keys
;;           keymap (car pair)
;;           (lambda () (interactive)
;;             (synthesize-event (lookup-event (cadr pair)) (input-focus)))))
;;        value))))


;;** window snooper
(require 'window-snooper)
(bind-keys global-keymap "C-W-s" 'window-snooper)

;;** window focus
(require 'focus-by-direction)
(bind-keys window-keymap "W-S-Up"    'focus-north)
(bind-keys window-keymap "W-S-Left"  'focus-west)
(bind-keys window-keymap "W-S-Right" 'focus-east)
(bind-keys window-keymap "W-S-Down"  'focus-south)

;;** undo
(require 'undo)
(bind-keys global-keymap "W-/"    'undo)
(bind-keys global-keymap "W-?"    'undo-redo)

;;** number windows TODO not work
;; (require 'number-windows)

;;* init and cleanup, startup programs
(define my-startup-programs
  '(
    ;; ("xloadimage" "-onroot" "-fullscreen" "/home/kid/.desktop")
    ;; ("asclock" "-theme" "/home/kid/.asclock/kid"))
    ("xcompmgr" "-cC" "-t-5" "-l-5" "-r4.2" "-o.55")

    ("xsetroot" "-cursor_name" "left_ptr")
    ("xscreensaver" "-no-splash")
    ("ibus-daemon")
    ("tilda")                           ;just for SOS
  ))

(mapc (lambda (program)
        (apply start-process (make-process standard-output) program))
      my-startup-programs)

(defun fsh/cleanup-on-exit ()
  ;; kill manually TODO
  ;; (system "killall -- xcompmgr xscreensaver ibus-daemon")
  (mapc kill-process (active-processes)))
(add-hook 'before-exit-hook 'fsh/cleanup-on-exit 'end)


;;* Miscellaneous

;;** mock a quake style console TODO
;; TODO
(defvar-setq my-terminal-name "terminator")
(defvar-setq my-terminal-wm-class "Terminator")
(add-window-matcher '((WM_CLASS . "^Terminator/terminator$"))
                    '((dimensions . (1200 . 400))
                      (place-mode . centered)
                      (fixed-positon . t)
                      (position . north)
                      (frame-type . top-border)
                      (never-delete . t)
                      (cycle-skip . t)
                      (window-list-skip . t)
                      (task-list-skip . t)
                      (animator . none)
                      ;; (fsh/matcher-transparency . #x80000000)
                      ))
;; TODO
(remove-window-matcher '((WM_CLASS . "^Terminator/terminator$"))
                    '(
                      fsh/test
                      ;; dimensions
                      ;; frame-type
                      ))

;; global keybind
(bind-keys global-keymap "F12"
           `(jump-or-exec "Terminator" "terminator"
                          #:match-class t
                          #:onfocused iconify-window))
                          ;; #:onfocused (fsh/toggle-window-visible (get-window-by-class my-terminal-wm-class))))

;;*** auto hide terminal when lose focus TODO
(defun fsh/hide-terminal-when-lose-focus-hook (win focus-mode)
  "Makes the window that went out-of-focus, dim"
   (let ((w_id (window-frame-id win))
         (tw_id (window-frame-id (get-window-by-class my-terminal-wm-class))))
     (if (= w_id tw_id)
         (iconify-window win)))
   (sync-server))
;; (add-hook 'focus-out-hook fsh/hide-terminal-when-lose-focus-hook)

;;*** set transparency TODO
;; (define-match-window-setter 'fsh/matcher-transparency
;;   (lambda (w prop value)
;;     (declare (unused prop))
;;     (set-x-property w '_NET_WM_WINDOW_OPACITY (make-vector 1 value) 'CARDINAL 32)
;;     (sync-server)
;;     ))

;; (defvar my-terminal-trans #x80000000)
;;  (make-vector 1 #x80000000)
;;  (make-vector 1 *out-of-focus-trans*)
;; (string-to-number "FF" 16)
;; (set-x-property (get-window-by-class "Tilda") '_NET_WM_WINDOW_OPACITY (make-vector 1 my-terminal-trans) 'CARDINAL 32)
;; (set-x-property (input-focus) '_NET_WM_WINDOW_OPACITY (make-vector 1 my-terminal-trans) 'CARDINAL 32)
;; (delete-x-property (get-window-by-class "Tilda") '_NET_WM_WINDOW_OPACITY)
;; (sync-server)

;;*** only for Tilda
(add-window-matcher '((WM_CLASS . "^Tilda/tilda$"))
                    '((place-mode . centered)
                      (fixed-positon . t)
                      (position . north)
                      (frame-type . top-border)
                      (never-delete . t)
                      ))

;;** volume control
(require 'fsh-volume-control-amixer)
(bind-keys global-keymap "Super-=" 'audio-up
                         "Super--" 'audio-down
                         "Super-0" 'audio-toggle-mute)

;;** custom app runner TODO
;; (add-window-matcher '((WM_CLASS . "^Konsole/konsole$"))
;;                      '((frame-type . none)
;;                        (depth . 0)
;;                        (workspace . 2)))
;; (synthesize-event "F12" wind)
;; (bind-keys global-keymap "Super-=" '())


;;** run applications TODO
;; (require 'run-application-ng)
;; (bind-keys global-keymap "W-r"    'run-application)

(bind-keys global-keymap "M-F2"
           `(jump-or-exec "Xfce4-appfinder" "xfce4-appfinder" #:match-class t
                            #:onfocused iconify-window))
                            ;; #:onfocused fsh/toggle-window-visible))
                          ;; #:onfocused (fsh/toggle-window-visible (get-window-by-class "Xfce4-appfinder"))))
(add-window-matcher '((WM_CLASS . "^Xfce4-appfinder/xfce4-appfinder$"))
                    '((animator . none)))

;; emacs style keybindings
(add-window-matcher '((WM_CLASS . "xfce4-appfinder"))
                    '((keymap-trans . (("C-p" "Up") ("C-n" "Down")
                                      ("C-f" "Right") ("C-b" "Left")
                                      ("C-j" "Return") ("C-g" "Esc")
                                      ("C-i" "TAB")
                                      ))))


;;** fsh/describe-key TODO
;; (defun fsh/describe-key ()
;;   (interactive)
;;   (require 'keymap)
;;   (fsh/display-message (concat "You input \""
;;                                (event-name (read-event "Please input the key: "))
;;                                "\"")))
;; (bind-keys global-keymap "W-c" 'fsh/describe-key)

;;** wy-describe-key TODO
;; (require 'wy-describe-key)
;; (bind-keys global-keymap "W-c" 'describe-what-am-i-doing)

;;** uptimes
(require 'uptimes)
(bind-keys global-keymap "W-C-u" 'uptimes-display-uptime)
(bind-keys global-keymap "W-C-S-u" 'uptimes-display-uptimes)

;;** shutdown TODO
;; (require 'shutdown)
;; (setq *shutdown-windows*
;;       '(("Opera " . "C-q")
;;         ("Firefox" . "C-S-w")
;;         ;; ("Emacs" . "C-x C-c"))
;;         ("Emacs" . "M-F4"))
;;       )
;; (nconc root-menu '(("_Quit" (shutdown quit))))
;; ;; (shutdown)

;;** pager TODO
;; (require 'sawfish.wm.ext.pager)
;; (pager)

;; (add-window-matcher '((WM_CLASS . "^Sawfishpager/sawfishpager$"))
;;                      '((position . north-east)
;;                         (fixed-positon . t)
;;                         (never-maximize . t)
;;                         (never-iconify . t)
;;                         (frame-type . none)
;;                         (cycle-skip . t)
;;                         (window-list-skip . t)
;;                         (sticky . t)
;;                         (sticky-viewport . t)
;;                         (avoid . ())))
