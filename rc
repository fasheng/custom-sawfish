;;; rc ---
;;
;; Author: Xu FaSheng <fasheng.xu@gmail.com>
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 3, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Code:


;;;==================================================================
;;;* Basic
;;;==================================================================

;; load path
(setq load-path (cons "~/.sawfish/" load-path))

;; load defaults
(require 'sawfish-defaults)

;;;** load modules
(require 'sawfish.wm.ext.match-window)
(require 'sawfish.wm.focus)
(require 'sawfish.wm.windows)
(require 'sawfish.wm.util.compat)
(require 'sawfish.wm.workspace)
(require 'sawfish.wm.ext.wallpaper)
(require 'sawfish.wm.commands.jump-or-exec)
(require 'rep.io.timers)

;;;** Menu
(bind-keys root-window-keymap "button3-click1"
           '(popup-root-menu))
(defvar-setq apps-menu-autogen nil)

;;;*** prompt menu
(require 'prompt-menu)
(bind-keys global-keymap "W-C-Menu" '(prompt-menu root-menu "Menu: "))

;;;*** TODO load autogenerated arch-menu
(require 'init-arch-menu)

;; replace Sawfish's apps-menu with ours
(setq apps-menu arch-menu)

;;;** error handler
(defvar-setq error-handler-beep nil)
(defvar-setq error-destination 'both)

;;;** hot-spot TODO

;;;** config defualt xterm, filemanager and browser
(defvar-setq xterm-program "terminal")
(defvar-setq browser-program "chromium")
(defvar-setq filemanager-program "nautilus")

;;;** key press TODO
(defvar-setq multi-click-delay 200)

;;;** session TODO
(require 'sawfish.wm.session.init)
(require 'sawfish.wm.session.save)
(require 'sawfish.wm.session.load)

;; (defun fsh-save-session ()
;;   ;; (mapc stop-process (active-processes)
;;   )

;; (add-hook 'before-exit-hook 'save-session)
;; (add-hook 'after-initialization-hook 'load-session 'end)
;; (save-session)
;; (sm-save-yourself)


;;;==================================================================
;;;* Custom functions TODO
;;;==================================================================

(defun fsh-toggle-window-visible (w)
  (if (window-visible-p w)
      (hide-window w)
    (show-window w)))

;;;** fsh-display-message
(defun fsh-display-message (message #!optional seconds)
  (display-message message)
  (make-timer (lambda () (display-message nil)) (or seconds 3)))


;;;==================================================================
;;;* Look and feel, appearance
;;;==================================================================

;;;** theme
(custom-set-typed-variable (quote default-frame-style) (quote Yellowcurve-Prion) (quote frame-style))
;; TODO theme Bluecurve-Prion will cause font issue
;; (custom-set-typed-variable (quote default-frame-style) (quote Bluecurve-Prion) (quote frame-style))

;;;** font
(custom-set-typed-variable 'default-font '("Pango" . "WenQuanYi Zen Hei Medium 11") 'font)
(custom-set-typed-variable (quote use-custom-font) (quote t) (quote boolean))
(custom-set-typed-variable (quote frame-font-clicked) (quote ("Pango" . "WenQuanYi Zen Hei Medium 11")) (quote font))
(custom-set-typed-variable (quote frame-font-highlight) (quote ("Pango" . "WenQuanYi Zen Hei Medium 11")) (quote font))
(custom-set-typed-variable (quote frame-font-active) (quote ("Pango" . "WenQuanYi Zen Hei Medium 11")) (quote font))
(custom-set-typed-variable (quote frame-font-inactive) (quote ("Pango" . "WenQuanYi Zen Hei Medium 11")) (quote font))

;;;** text position
(custom-set-typed-variable (quote use-custom-text-position) (quote t) (quote boolean))
(custom-set-typed-variable (quote custom-text-y-position) (quote center) (quote (choice default top center bottom)))
(custom-set-typed-variable (quote custom-text-x-position) (quote center) (quote (choice default left center right)))


;;;** animation
(define-special-variable default-window-animator 'wireframe)
(setq animate-move-delay 10)

;;;** wallpaper
(defvar-setq root-wallpaper "~/.wallpapers/Ariya/contents/images/1280x800.png")
(defvar-setq wallpaper-setter "hsetroot")
(defvar-setq wallpaper-setter-args "-center")
;; set wallpaper manually
(system "hsetroot -full ~/.wallpapers/Ariya/contents/images/1280x800.png &")

;;;** TODO transparency
;; (require 'native-focus-transparency)


;;;==================================================================
;;;* Keybinding
;;;==================================================================

(custom-set-typed-variable 'wm-modifier-value '(super) 'modifier-list)

;;;** global keymap
(bind-keys global-keymap
           ;;;*** window
           "M-TAB"   'cycle-windows
           "M-ISO_Left_Tab" 'cycle-windows-backwards
           "W-j"     'next-workspace-window
           "W-k"     'previous-workspace-window
           "W-z"     'toggle-window-iconified
           "W-S-z"   'iconify-workspace-windows
           "W-m"     'maximize-window-toggle
           "W-S-m"   'maximize-window-fullscreen-toggle

           ;;;*** menu
           "W-Menu"  'popup-window-menu
           "C-Menu"  'popup-root-menu
           "S-Menu"  'popup-apps-menu

           ;;;*** workspace, desktop
           "W-C-d"   'toggle-desktop    ;TODO
           "W-h"     'previous-workspace
           "W-l"     'next-workspace
           "W-S-h"   'send-to-previous-workspace
           "W-S-l"   'send-to-next-workspace
           "W-F1"    '(activate-workspace 1)
           "W-F2"    '(activate-workspace 2)
           "W-F3"    '(activate-workspace 3)
           "W-F4"    '(activate-workspace 4)
           "W-S-F1"  '(send-to-workspace 1)
           "W-S-F2"  '(send-to-workspace 2)
           "W-S-F3"  '(send-to-workspace 3)
           "W-S-F4"  '(send-to-workspace 4)
           "W-a"    '(activate-workspace 1)
           "W-s"    '(activate-workspace 2)
           "W-d"    '(activate-workspace 3)
           "W-f"    '(activate-workspace 4)
           "W-S-a"  '(send-to-workspace 1)
           "W-S-s"  '(send-to-workspace 2)
           "W-S-d"  '(send-to-workspace 3)
           "W-S-f"  '(send-to-workspace 4)

           ;;;*** sawfish action
           "W-C-e"  'display-errors
           "W-e"    '(display-message nil) ;erase displayed message

           ;;;**** screensaver
           "W-;"     '(system "(sleep 0.5; xset dpms force off) &")
           "Pause"   '(system "xscreensaver-command -lock & (sleep 1; xset dpms force off) &")

           ;;;**** print screen
           "Print"   '(system "scrot ~/desktop_$(date +%F_%R).png &")
           "M-Print" '(system "scrot -bs ~/window_$(date +%F_%R).png &")
           "C-M-Print" '(system "scrot -s ~/rectangle_$(date +%F_%R).png &")

           ;;;**** other TODO
           )

;;;** Application Keymacros
(define apps-keymap (make-keymap))
(bind-keys global-keymap "W-x" apps-keymap)

(defvar-setq never-match-text "" "a string that will never match normal text")
(bind-keys apps-keymap
  "e"   `(jump-or-exec "Emacs" "emacs" t #:match-class t)
  "S-e" `(jump-or-exec "Emacs" "emacs" t #:match-class t)

  "s"   `(jump-or-exec "smplayer" "smplayer" nil #:match-class t)
  "S-s" `(jump-or-exec never-match-text "smplayer" nil #:match-class t)
  "v"   `(jump-or-exec "Vlc" "vlc" nil #:match-class t)
  "S-v" `(jump-or-exec "VirtualBox" "VirtualBox" nil #:match-class t)
  ;; "m"   `(jump-or-exec "audacious" "audacious" nil #:match-class t)
  ;; "S-m" `(jump-or-exec "deadbeef" "deadbeef" nil #:match-class t) ;TODO
  "m"   `(jump-or-exec "deepin-music-player" "deepin-music-player" nil #:match-class t)
  "S-m" `(jump-or-exec "deepin-media-player" "deepin-media-player" nil #:match-class t)
  "r"   `(jump-or-exec "Liferea" "liferea" nil #:match-class t)
  "i"   `(jump-or-exec "Eog" "eog" nil #:match-class t)
  "S-i"   `(jump-or-exec "Gthumb" "gthumb" nil #:match-class t)
  "p"   `(jump-or-exec "Evince" "evince" nil #:match-class t)
  "S-p" `(jump-or-exec never-match-text "evince" nil #:match-class t)

  "t"   `(jump-or-exec "URxvt" "urxvt" #:match-class t)
  "S-t" `(jump-or-exec never-match-text "urxvt" nil #:match-class t)
  "f"   `(jump-or-exec "Thunar" "thunar" nil #:match-class t)
  "S-f" `(jump-or-exec "Nautilus" "nautilus" nil #:match-class t)
  "b"   '(jump-or-exec "Chromium" "chromium_with_shm" nil #:match-class t)
  "S-b" '(jump-or-exec never-match-text "chromium" nil #:match-class t)
  )


;;;==================================================================
;;;* Workspace
;;;==================================================================

(defvar-setq workspace-names '("Master" "Slave" "Playground" "Misc")â€ƒ)
(defvar-setq workspace-boundary-mode 'wrap-around)
(defvar-setq workspace-send-boundary-mode 'wrap-around)

;;;** display workspace name
(defcustom display-ws-name-on-switch nil
  "Whether to display workspace name upon switch"
  :type boolean
  :group workspace
  :after-set (lambda () (display-ws-name-setter)))

(defcustom display-ws-name-timeout 2
  "How long to display workspace name"
  :type number
  :group workspace)

;; TODO timeout 0.5, show message on top
(define (display-workspace-name)
  (fsh-display-message
   (format nil "Now on Workspace: %s"
           (or (nth current-workspace workspace-names)
               (format nil (_ "Workspace %d") (1+ current-workspace))))
   display-ws-name-timeout))

(define (display-ws-name-setter)
  (if (eq display-ws-name-on-switch 't)
      (add-hook 'enter-workspace-hook display-workspace-name)
    (remove-hook 'enter-workspace-hook display-workspace-name)))

;; setup
(setq display-ws-name-on-switch t)
(setq display-ws-name-timeout 1)
(display-ws-name-setter)

;;;** switch to last workspace or window
(defvar workspace-last nil "mark the last workspace")
(defvar window-last nil "mark the last window")
(define window-or-workspace? 'window)
(add-hook 'leave-workspace-hook
          (lambda (current)
            (setq workspace-last current)
            (setq window-or-workspace? 'workspace)))

(add-hook 'focus-out-hook
          (lambda (current)
            (setq window-last current)
            (setq window-or-workspace? 'window)))

(bind-keys global-keymap "W-`"
           (lambda ()
             (if (eq window-or-workspace? 'workspace)
                 (select-workspace workspace-last)
               (display-window window-last))))


;;;==================================================================
;;;* Viewports TODO
;;;==================================================================

;; (defvar-setq viewport-dimensions '(1 . 1))
;; (defvar-setq viewport-minimum-dimensions '(1 . 1))
;; (defvar-setq uniconify-to-current-viewport t)
;; (defvar-setq viewport-boundary-mode 'dynamic)
;; (defvar-setq scroll-viewport-steps 45)


;;;==================================================================
;;;* Window
;;;==================================================================

(defvar-setq decorate-transients t)
;; (defvar-setq maximize-ignore-when-filling t)

;;;** cycling
(define-special-variable cycle-all-workspaces nil)
(define-special-variable cycle-all-viewports t)
(define-special-variable cycle-raise-windows nil)

;;;** placement TODO
(defvar-setq place-window-mode 'centered)
(defvar-setq place-transient-mode 'centered-on-parent)

;;;** window keymap
(bind-keys window-keymap
           "M-F4"     'delete-window-safely
           "M-S-F4"   'destroy-window
           ;; "W-p"      'toggle-window-shaded
           )

;;;** window history
(defvar-setq window-history-auto-save-position t)
(defvar-setq window-history-auto-save-dimensions t)
(defvar-setq window-history-auto-save-state t)
(defvar-setq window-history-ignore-transients nil)

;;;** move and resize
(defvar-setq move-show-position t)
(defvar-setq resize-show-dimensions t)

(require 'sawfish.wm.commands.move-resize)

;;;*** center-mouse-on-window-move
(require 'center-mouse-on-window-move)

;;;*** move window in screen edges
(require 'animate-move)
(bind-keys window-keymap
           "W-i"   'animate-center-window
           "W-s-i" 'center-window
           "W-u"   'rotate-move)

;;;*** move window manually
(require 'animate-move)
(defun fsh-move-window (dir inc #!optional edge no-focus)
  "Move focused window 'left, 'right, 'up or 'down."
  (interactive)
  (let* ((win (input-focus))
         (pos (window-position win))
         (dim (window-frame-dimensions win))
         (endx (car pos))
         (endy (cdr pos)))
    (cond ((eq dir 'left) (setq endx (if edge 0 (- endx inc))))
          ((eq dir 'right) (setq endx
                                (if edge
                                    (- (screen-width) (car dim))
                                  (+ endx inc))))
          ((eq dir 'up) (setq endy
                              (if edge 0 (- endy inc))))
          ((eq dir 'down) (setq endy
                              (if edge
                                  (- (screen-height) (cdr dim))
                                (+ endy inc)))))
    ;; (move-window-to win endx endy)
    (animate-move-window-to win endx endy)
    (unless no-focus
      (display-window win))))

(bind-keys global-keymap "W-M-h"   '(fsh-move-window 'left 30))
(bind-keys global-keymap "W-M-l"   '(fsh-move-window 'right 30))
(bind-keys global-keymap "W-M-j"   '(fsh-move-window 'down 30))
(bind-keys global-keymap "W-M-k"   '(fsh-move-window 'up 30))

(bind-keys global-keymap "W-M-S-h" '(fsh-move-window 'left 5))
(bind-keys global-keymap "W-M-S-l" '(fsh-move-window 'right 5))
(bind-keys global-keymap "W-M-S-j" '(fsh-move-window 'down 5))
(bind-keys global-keymap "W-M-S-k" '(fsh-move-window 'up 5))

(bind-keys global-keymap "W-M-Left" '(fsh-move-window 'left 0 'edge))
(bind-keys global-keymap "W-M-Right" '(fsh-move-window 'right 0 'edge))
(bind-keys global-keymap "W-M-Down" '(fsh-move-window 'down 0 'edge))
(bind-keys global-keymap "W-M-Up" '(fsh-move-window 'up 0 'edge))

;;;*** no-mouse
(defvar-setq rsk-panel-height 0)
(require 'no-mouse)

(bind-keys global-keymap "W-C-h"      '(rsk-shove-size-window 'left 30))
(bind-keys global-keymap "W-C-l"     '(rsk-shove-size-window 'right 30))
(bind-keys global-keymap "W-C-k"        '(rsk-shove-size-window 'up 30))
(bind-keys global-keymap "W-C-j"      '(rsk-shove-size-window 'down 30))
(bind-keys global-keymap "W-C-S-h"    '(rsk-shove-size-window 'left 5))
(bind-keys global-keymap "W-C-S-l"   '(rsk-shove-size-window 'right 5))
(bind-keys global-keymap "W-C-S-k"      '(rsk-shove-size-window 'up 5))
(bind-keys global-keymap "W-C-S-j"    '(rsk-shove-size-window 'down 5))

(bind-keys global-keymap "W-KP_End"      '(rsk-grid-place-window 1))
(bind-keys global-keymap "W-KP_Down"     '(rsk-grid-place-window 2))
(bind-keys global-keymap "W-KP_Next"     '(rsk-grid-place-window 3))
(bind-keys global-keymap "W-KP_Left"     '(rsk-grid-place-window 4))
(bind-keys global-keymap "W-KP_Begin"    '(rsk-grid-place-window 5))
(bind-keys global-keymap "W-KP_Right"    '(rsk-grid-place-window 6))
(bind-keys global-keymap "W-KP_Home"     '(rsk-grid-place-window 7))
(bind-keys global-keymap "W-KP_Up"       '(rsk-grid-place-window 8))
(bind-keys global-keymap "W-KP_Prior"    '(rsk-grid-place-window 9))

;;;*** tabbed window TODO
;; (require 'sawfish.wm.tabs.tab)
;; (require 'sawfish.wm.tabs.tabgroup)
;; (bind-keys window-keymap "W-t"   'tab-add-to-group)
;; (bind-keys window-keymap "W-S-t" 'tab-release-window)


;;;** iswitch window
(require 'iswitch-window)
(bind-keys global-keymap "W-w" 'iswitch-window)

;;;** cabinet, extension for iswitch, TODO fix the keybindings
;(require 'cabinet)
;(bind-keys global-keymap "W-S-w" 'cabinet-switch)

;;;** window snooper
(require 'window-snooper)
(bind-keys global-keymap "C-W-s" 'window-snooper)

;;;** window focus
(require 'focus-by-direction)
(bind-keys window-keymap "W-S-Up"    'focus-north)
(bind-keys window-keymap "W-S-Left"  'focus-west)
(bind-keys window-keymap "W-S-Right" 'focus-east)
(bind-keys window-keymap "W-S-Down"  'focus-south)

;;;** undo window state
(require 'undo)
(bind-keys global-keymap "W-/"    'undo)
(bind-keys global-keymap "W-?"    'undo-redo)

;;;** number windows TODO not work
;; (require 'number-windows)

;;;** window matcher, action for special windows
;;;*** test window matcher
(define-match-window-setter 'fsh-test
  (lambda (w prop value)
    (declare (unused prop))
    (display-message (format nil "Volume: %s %s" (car value) (cdr value)))
    ))

;;;*** set transparency TODO
;; (define-match-window-setter 'fsh-matcher-transparency
;;   (lambda (w prop value)
;;     (declare (unused prop))
;;     (set-x-property w '_NET_WM_WINDOW_OPACITY (make-vector 1 value) 'CARDINAL 32)
;;     (sync-server)
;;     ))

;; (defvar my-terminal-trans #x80000000)
;;  (make-vector 1 #x80000000)
;;  (make-vector 1 *out-of-focus-trans*)
;; (string-to-number "FF" 16)
;; (set-x-property (get-window-by-class "Tilda") '_NET_WM_WINDOW_OPACITY (make-vector 1 my-terminal-trans) 'CARDINAL 32)
;; (set-x-property (input-focus) '_NET_WM_WINDOW_OPACITY (make-vector 1 my-terminal-trans) 'CARDINAL 32)
;; (delete-x-property (get-window-by-class "Tilda") '_NET_WM_WINDOW_OPACITY)
;; (sync-server)


;;;** config for target applications
;;;*** emacs
(add-window-matcher '((WM_CLASS . "^Emacs/emacs$"))
                    '(
                      (dimensions . (800 . 600))
                      (position . center)
                      (fixed-positon . t)
                      (never-delete . t)
                      (workspace . 1)))

;;;*** chromium
(add-window-matcher '((WM_CLASS . "^Chromium/chromium$"))
                    '((workspace . 1)
                      (frame-type . none)
                      ))

;;;*** vlc
(add-window-matcher '((WM_CLASS . "^Vlc/vlc$"))
                    '((workspace . 3)))

;;;*** deadbeef
(add-window-matcher '((WM_CLASS . "^Deadbeef/deadbeef$"))
                    '((workspace . 3)))

;;;*** audacious
(add-window-matcher '((WM_CLASS . "^Audacious/audacious$"))
                    '((workspace . 3)))

;;;*** deepinn music player
(add-window-matcher '((WM_CLASS . "^Deepin-music-player/deepin-music-player$"))
                    '((workspace . 3)))

;;;*** deepin media player
(add-window-matcher '((WM_CLASS . "^Deepin-media-player/deepin-media-player$"))
                    '((workspace . 3)))

;;;*** liferea
(add-window-matcher '((WM_CLASS . "^Liferea/liferea$"))
                    '((workspace . 3)))
;;;*** virtualbox
(add-window-matcher '((WM_CLASS . "VirtualBox"))
                    '((workspace . 2)))

;;;*** ark
(add-window-matcher '((WM_CLASS . "^Ark/ark$"))
                    '((dimensions . (800 . 600))))

;;;*** cairo-clock
(add-window-matcher '((WM_CLASS . "Cairo-clock"))
                    '((dimensions . (360 . 360))
                      (position . north-west)
                      (never-delete . t)
                      (cycle-skip . t)
                      (window-list-skip . t)
                      (task-list-skip . t)
                      (animator . none)
                      (sticky . t)
                      (never-focus . t)
                      (depth . -1)
                      ))

;;;*** conky
(add-window-matcher '((WM_CLASS . "Conky"))
                    '((never-focus . t)
                      (never-iconify . t)
                      ))

;;;*** tint2
(add-window-matcher '((WM_CLASS . "Tint2"))
                    '((never-focus . t)
                      ))

;;;*** deluge
(add-window-matcher '((WM_CLASS . "Deluge"))
                    '((workspace . 2)))

;;;*** mock a quake style console TODO
;; (defvar-setq my-terminal-name "xfce4-terminal")
;; (defvar-setq my-terminal-wm-class "Xfce4-terminal")

;; global keybind
(bind-keys global-keymap
           "F12" '(jump-or-exec "Xfce4-terminal" "xfce4-terminal"
                                #:match-class t
                                #:onfocused iconify-window)
           "W-TAB" '(jump-or-exec "Xfce4-terminal" "xfce4-terminal"
                                #:match-class t
                                #:onfocused iconify-window))
;; (bind-keys global-keymap
;;            "F12" '(jump-or-exec "Deepin-terminal" "deepin-terminal"
;;                                 #:match-class t
;;                                 #:onfocused iconify-window)
;;            "W-TAB" '(jump-or-exec "Deepin-terminal" "deepin-terminal"
;;                                   #:match-class t
;;                                   #:onfocused iconify-window))

;; TODO
;; #:onfocused (fsh-toggle-window-visible (get-window-by-class my-terminal-wm-class))))

;;;**** deepin-terminal
(add-window-matcher '((WM_CLASS . "^Deepin-terminal/deepin-terminal$"))
                    '(
                      (place-mode . centered)
                      (fixed-positon . t)
                      (position . north)
                      (never-delete . t)
                      (cycle-skip . t)
                      (window-list-skip . t)
                      (task-list-skip . t)
                      (animator . none)
                      (sticky . t)
                      ))

;;;**** xfce4-terminal
(add-window-matcher '((WM_CLASS . "^Xfce4-terminal/xfce4-terminal$"))
                    '(
                      (place-mode . centered)
                      (fixed-positon . t)
                      (position . north)
                      (frame-type . top-border)
                      (never-delete . t)
                      (cycle-skip . t)
                      (window-list-skip . t)
                      (task-list-skip . t)
                      (animator . none)
                      (sticky . t)
                      ))
;; test TODO
;; (remove-window-matcher '((WM_CLASS . "^Xfce4-terminal/xfce4-terminal$"))
;;                        '(dimensions))


;;;**** Tilda
(add-window-matcher '((WM_CLASS . "^Tilda/tilda$"))
                    '((place-mode . centered)
                      (fixed-positon . t)
                      (position . north)
                      (frame-type . top-border)
                      (never-delete . t)
                      (cycle-skip . t)
                      (window-list-skip . t)
                      (task-list-skip . t)
                      (animator . none)
                      (sticky . t)
                      ))

;;;**** auto hide terminal when lose focus TODO
(defun fsh-hide-terminal-when-lose-focus-hook (win focus-mode)
  "Makes the window that went out-of-focus, dim"
   (let ((w_id (window-frame-id win))
         (tw_id (window-frame-id (get-window-by-class my-terminal-wm-class))))
     (if (= w_id tw_id)
         (iconify-window win)))
   (sync-server))
;; (add-hook 'focus-out-hook fsh-hide-terminal-when-lose-focus-hook)

;;;*** app runner TODO
;; (require 'run-application-ng)
;; (bind-keys global-keymap "W-r"    'run-application)

;;;**** xfce4 appfinder
;; (bind-keys global-keymap "M-F2"
;;            `(jump-or-exec "Xfce4-appfinder" "xfce4-appfinder -c" #:match-class t
;;                             #:onfocused iconify-window))
;; (add-window-matcher '((WM_CLASS . "^Xfce4-appfinder/xfce4-appfinder$"))
;;                     '((animator . none)))

;;;***** emacs style keybindings for xfce4-appfinder
;; (add-window-matcher '((WM_CLASS . "xfce4-appfinder"))
;;                     '((keymap-trans . (("C-p" "Up") ("C-n" "Down")
;;                                        ("C-f" "Right") ("C-b" "Left")
;;                                        ("C-j" "Return") ("C-g" "Esc")
;;                                        ("C-i" "TAB")
;;                                        ))))

;;;**** kupfer
(bind-keys global-keymap "W-p"
           '(jump-or-exec "Kupfer" "kupfer" #:match-class t
                            #:onfocused iconify-window))
(add-window-matcher '((WM_CLASS . "^Kupfer.py/kupfer.py$"))
                    '((animator . none)))

;;;***** emacs style keybindings for kupfer
(add-window-matcher '((WM_CLASS . "kupfer.py"))
                    '((keymap-trans . (("C-p" "Up") ("C-n" "Down")
                                       ("C-f" "Right") ("C-b" "Left")
                                       ("C-j" "Return") ("C-g" "Esc")
                                       ("C-i" "TAB")
                                       ))))


;;;==================================================================
;;;* Autostart and Cleanup
;;;==================================================================

(define my-startup-programs
  '(
    ;TODO: setup compton
    ("compton" "--config" "/home/fsh/.compton.conf")
    ("xsetroot" "-cursor_name" "left_ptr")
    ("xscreensaver" "-no-splash")
    ("xfce4-terminal")
    ("fcitx")
    ("cairo-clock")
    ("tint2")
    ("conky")
    ("numlockx" "on")
    ("/usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1")
  ))

(mapc (lambda (program)
        (apply start-process (make-process standard-output) program))
      my-startup-programs)

(defun fsh-cleanup-on-exit ()
  ;; kill manually TODO
  ;; (system "killall -- xcompmgr xscreensaver ibus-daemon")
  (mapc kill-process (active-processes)))
(add-hook 'before-exit-hook 'fsh-cleanup-on-exit 'end)


;;;==================================================================
;;;* Miscellaneous
;;;==================================================================

;;;** volume control
(require 'fsh-volume-control-amixer)
(bind-keys global-keymap "Super-=" 'audio-up
                         "Super--" 'audio-down
                         "Super-0" 'audio-toggle-mute)


;;;** fsh-describe-key TODO
;; (defun fsh-describe-key ()
;;   (interactive)
;;   (require 'keymap)
;;   (fsh-display-message (concat "You input \""
;;                                (event-name (read-event "Please input the key: "))
;;                                "\"")))
;; (bind-keys global-keymap "W-c" 'fsh-describe-key)

;;;** wy-describe-key TODO
;; (require 'wy-describe-key)
;; (bind-keys global-keymap "W-c" 'describe-what-am-i-doing)

;;;** uptimes TODO
;; (require 'uptimes)
;; (bind-keys global-keymap "W-C-u" 'uptimes-display-uptime)
;; (bind-keys global-keymap "W-C-S-u" 'uptimes-display-uptimes)

;;;** shutdown TODO
;; (require 'shutdown)
;; (setq *shutdown-windows*
;;       '(("Opera " . "C-q")
;;         ("Firefox" . "C-S-w")
;;         ;; ("Emacs" . "C-x C-c"))
;;         ("Emacs" . "M-F4"))
;;       )
;; (nconc root-menu '(("_Quit" (shutdown quit))))
;; ;; (shutdown)

;;;** poweroff ssd
(bind-keys global-keymap
           "C-M-Delete"   '(system "ssd &")
           "W-C-M-Delete" 'restart)
;; (add-window-matcher '((WM_CLASS . "Sawfish-Session-Dialog"))
;;                     '((keymap-trans . (("Esc" "M-F4") ("C-g" "M-F4")
;;                                        ("C-c" "M-F4")
;;                                        ))))

;;;** pager TODO
;; (require 'sawfish.wm.ext.pager)
;; (pager)

;; (add-window-matcher '((WM_CLASS . "^Sawfishpager/sawfishpager$"))
;;                      '((position . north-east)
;;                         (fixed-positon . t)
;;                         (never-maximize . t)
;;                         (never-iconify . t)
;;                         (frame-type . none)
;;                         (cycle-skip . t)
;;                         (window-list-skip . t)
;;                         (sticky . t)
;;                         (sticky-viewport . t)
;;                         (avoid . ())))

;; Local Variables:
;; mode: sawfish
;; mode: orgstruct
;; End:
